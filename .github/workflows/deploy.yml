name: Deploy Documentation

on:
  push:
    branches: [main]
  workflow_dispatch:
  # Trigger from monorepo when docs update
  repository_dispatch:
    types: [docs-update]
  schedule:
    # Run every 6 hours to catch updates from main repo
    - cron: '0 */6 * * *'

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout docs repository
        uses: actions/checkout@v4
        
      - name: Checkout main repository
        uses: actions/checkout@v4
        with:
          repository: tafystudio/tafystudio
          path: tafystudio-main
          token: ${{ secrets.GITHUB_TOKEN }}
        continue-on-error: true
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
      
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      
      - name: Install dependencies
        run: |
          npm ci
          pip install sphinx sphinx-rtd-theme sphinx-autodoc-typehints
      
      - name: Copy documentation from main repo
        run: |
          # Create docs directory
          mkdir -p docs
          
          # Check if main repo was cloned successfully
          if [ -d "tafystudio-main" ]; then
            # Copy all markdown files from main repo's docs directory
            if [ -d "tafystudio-main/docs" ]; then
              cp -r tafystudio-main/docs/* docs/ || true
            fi
            
            # Copy README if it exists
            if [ -f "tafystudio-main/README.md" ]; then
              cp tafystudio-main/README.md docs/
            fi
          else
            echo "Main repository not available, creating placeholder documentation"
            
            # Create placeholder files for all expected documents
            cat > docs/README.md << 'EOF'
          ---
          title: Tafy Studio Documentation
          sidebar_position: 1
          ---

          # Welcome to Tafy Studio

          Tafy Studio is a Robot Distributed Operation System designed to simplify robotics development.

          ## Getting Started

          - [Vision](./VISION) - Learn about our project vision
          - [Quick Start](./QUICKSTART) - Get up and running quickly
          - [Architecture](./ARCHITECTURE) - Understand the system design

          ## Note

          This is placeholder documentation. The full documentation will be available once the main repository is accessible.
          EOF

            cat > docs/VISION.md << 'EOF'
          ---
          title: Vision
          ---

          # Tafy Studio Vision

          Our vision is to create a comprehensive platform for robotics development that is:

          - **Accessible** - Easy to use for developers at all levels
          - **Scalable** - From single robots to large fleets
          - **Flexible** - Support for various hardware and use cases

          *Full vision document coming soon.*
          EOF

            cat > docs/ARCHITECTURE.md << 'EOF'
          ---
          title: Architecture
          ---

          # System Architecture

          Tafy Studio uses a distributed architecture based on:

          - **NATS Messaging** - For real-time communication
          - **HAL (Hardware Abstraction Layer)** - For hardware independence
          - **Multi-language SDKs** - TypeScript, Python, and Go

          *Detailed architecture documentation coming soon.*
          EOF

            cat > docs/CONCEPTS.md << 'EOF'
          ---
          title: Core Concepts
          ---

          # Core Concepts

          Key concepts in Tafy Studio:

          - **Nodes** - Independent processing units
          - **Messages** - Communication between nodes
          - **HAL** - Hardware abstraction

          *Full concepts guide coming soon.*
          EOF

            cat > docs/QUICKSTART.md << 'EOF'
          ---
          title: Quick Start
          ---

          # Quick Start Guide

          Get started with Tafy Studio in minutes.

          ## Installation

          ```bash
          # Install the CLI
          npm install -g @tafystudio/cli

          # Create a new project
          tafy create my-robot-project
          ```

          *Complete quick start guide coming soon.*
          EOF

            cat > docs/DEVELOPMENT_SETUP.md << 'EOF'
          ---
          title: Development Setup
          ---

          # Development Setup

          Set up your development environment for Tafy Studio.

          ## Prerequisites

          - Node.js 18+
          - Python 3.10+
          - Go 1.21+

          *Full development setup guide coming soon.*
          EOF

            cat > docs/TROUBLESHOOTING.md << 'EOF'
          ---
          title: Troubleshooting
          ---

          # Troubleshooting Guide

          Common issues and solutions.

          ## Connection Issues

          - Check NATS server is running
          - Verify network configuration

          *Complete troubleshooting guide coming soon.*
          EOF

            cat > docs/TESTING.md << 'EOF'
          ---
          title: Testing
          ---

          # Testing Guide

          Best practices for testing Tafy Studio applications.

          ## Unit Testing

          - Test individual components
          - Mock NATS connections

          *Full testing guide coming soon.*
          EOF

            cat > docs/SECURITY.md << 'EOF'
          ---
          title: Security
          ---

          # Security Guidelines

          Security best practices for Tafy Studio.

          ## Authentication

          - Use TLS for NATS connections
          - Implement proper access controls

          *Complete security guide coming soon.*
          EOF

            cat > docs/HAL_SPEC.md << 'EOF'
          ---
          title: HAL Specification
          ---

          # Hardware Abstraction Layer (HAL) Specification

          The HAL provides a standardized interface for hardware components.

          ## Message Types

          - Sensor data
          - Actuator commands
          - Status updates

          *Full HAL specification coming soon.*
          EOF
          fi
          
          # Create API documentation directory
          mkdir -p docs/api
          
          # Create API index
          cat > docs/api/index.md << 'EOF'
          ---
          title: API Reference
          description: Tafy Studio API documentation
          ---

          # API Reference

          Tafy Studio provides APIs in multiple languages for building robotics applications.

          ## Available APIs

          ### [TypeScript/JavaScript API](./typescript)
          The TypeScript SDK for building web interfaces and Node.js applications.

          ### [Python API](./python)
          The Python SDK for building backend services and robotics applications.

          ### [Go API](./go)
          The Go SDK for building high-performance node agents and services.

          ## Getting Started

          Each API provides:
          - Client libraries for NATS messaging
          - HAL (Hardware Abstraction Layer) message types
          - Helper utilities for common robotics tasks

          Choose the API that best fits your use case and development environment.
          EOF
          
          # Generate TypeScript API docs placeholder
          cat > docs/api/typescript.md << 'EOF'
          ---
          title: TypeScript API
          ---

          # TypeScript API Reference

          The TypeScript SDK is available as `@tafystudio/sdk-ts`.

          ## Installation

          ```bash
          npm install @tafystudio/sdk-ts
          ```

          ## Usage

          ```typescript
          import { TafyClient } from '@tafystudio/sdk-ts';

          const client = new TafyClient({
            natsUrl: 'nats://localhost:4222'
          });

          await client.connect();
          ```

          Full API documentation will be generated from the TypeScript source.
          EOF
          
          # Generate Python API docs placeholder
          cat > docs/api/python.md << 'EOF'
          ---
          title: Python API
          ---

          # Python API Reference

          The Python SDK provides comprehensive support for building Tafy Studio applications.

          ## Installation

          ```bash
          pip install tafystudio
          ```

          ## Usage

          ```python
          from tafystudio import TafyClient

          client = TafyClient(nats_url="nats://localhost:4222")
          await client.connect()
          ```

          Full API documentation coming soon.
          EOF
          
          # Generate Python API docs if available
          if [ -d "tafystudio-main/apps/hub-api" ]; then
            cd tafystudio-main/apps/hub-api
            python -m venv .venv
            source .venv/bin/activate || . .venv/bin/activate
            pip install -e . || echo "No setup.py found, skipping install"
            
            # Try to generate Sphinx docs
            if [ -d "docs" ]; then
              cd docs
              sphinx-build -b markdown . ../../../../docs/api/python -W --keep-going || {
                echo "Sphinx build had warnings, continuing..."
              }
              cd ..
            fi
            
            deactivate || true
            cd ../../..
          fi
          
          # Go API docs reference
          cat > docs/api/go.md << 'EOF'
          ---
          title: Go API
          ---

          # Go API Reference

          The Go SDK is available as a Go module.

          ## Installation

          ```bash
          go get github.com/tafystudio/tafystudio/packages/sdk-go
          ```

          ## Documentation

          Full API documentation is available at:
          <https://pkg.go.dev/github.com/tafystudio/tafystudio>

          ## Usage

          ```go
          import (
              "github.com/tafystudio/tafystudio/packages/sdk-go/client"
          )

          client, err := client.NewTafyClient("nats://localhost:4222")
          if err != nil {
              log.Fatal(err)
          }
          defer client.Close()
          ```
          EOF
      
      - name: Build documentation
        run: npm run build
        
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./build

  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
name: Deploy Documentation

on:
  push:
    branches: [main]
  workflow_dispatch:
  repository_dispatch:
    types: [docs-update]
  schedule:
    # Run every 6 hours to catch updates from main repo
    - cron: '0 */6 * * *'

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout docs repository
        uses: actions/checkout@v4
        
      - name: Checkout main repository
        id: checkout-main
        uses: actions/checkout@v4
        with:
          repository: tafystudio/tafystudio
          path: tafystudio-main
        continue-on-error: true
      
      - name: Check if main repository was cloned
        id: check-repo
        run: |
          if [ -d "tafystudio-main" ]; then
            echo "Main repository cloned successfully"
            echo "repo_exists=true" >> $GITHUB_OUTPUT
          else
            echo "WARNING: Main repository could not be cloned"
            echo "This might be because:"
            echo "1. The repository 'tafystudio/tafystudio' doesn't exist"
            echo "2. The repository is private and needs authentication"
            echo "3. There's a network or GitHub API issue"
            echo ""
            echo "Creating a demo documentation structure instead..."
            echo "repo_exists=false" >> $GITHUB_OUTPUT
          fi
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
      
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 9
          
      - name: Install required tools
        run: |
          # Install TypeDoc globally for API documentation
          npm install -g typedoc
          # Install additional tools that might be needed
          npm install -g @microsoft/api-extractor @microsoft/api-documenter
          # Show installed versions
          echo "Node version: $(node --version)"
          echo "npm version: $(npm --version)"
          echo "pnpm version: $(pnpm --version)"
          echo "Python version: $(python --version)"
          echo "pip version: $(pip --version)"
          echo "TypeDoc version: $(typedoc --version)"
      
      - name: Install dependencies
        run: |
          npm ci
          # Install Python documentation dependencies including markdown builder
          pip install sphinx sphinx-rtd-theme sphinx-autodoc-typehints sphinx-markdown-builder
          # Install myst-parser for better markdown support
          pip install myst-parser
      
      - name: Install monorepo dependencies
        if: steps.check-repo.outputs.repo_exists == 'true'
        run: |
          cd tafystudio-main
          
          # Show what's in the monorepo root
          echo "Monorepo structure:"
          ls -la
          
          # Check for docs directory
          echo "Checking docs directory:"
          ls -la docs/ || echo "docs/ directory not found"
          
          # Install uv for Python dependency management
          pip install uv
          
          # Install documentation build dependencies globally
          # This ensures they're available even if the monorepo doesn't install them
          pip install sphinx sphinx-rtd-theme sphinx-autodoc-typehints sphinx-markdown-builder myst-parser
          
          # Install Node dependencies if package.json exists
          if [ -f "package.json" ]; then
            echo "Installing npm dependencies..."
            npm install || echo "WARNING: npm install failed"
          fi
          
          # Install pnpm dependencies for packages if needed
          if [ -f "pnpm-workspace.yaml" ]; then
            echo "Installing pnpm workspace dependencies..."
            pnpm install --no-frozen-lockfile || echo "WARNING: pnpm install failed"
          fi
          
          # Check if required directories exist
          echo "Checking for required directories:"
          [ -d "packages" ] && echo "✓ packages/ exists" || echo "✗ packages/ not found"
          [ -d "apps" ] && echo "✓ apps/ exists" || echo "✗ apps/ not found"
          [ -d "scripts" ] && echo "✓ scripts/ exists" || echo "✗ scripts/ not found"
          [ -f "Makefile" ] && echo "✓ Makefile exists" || echo "✗ Makefile not found"
          
          cd ..
      
      - name: Extract documentation from monorepo
        if: steps.check-repo.outputs.repo_exists == 'true'
        run: |
          cd tafystudio-main
          # Make the script executable (in case permissions aren't preserved)
          chmod +x scripts/extract-docs.sh
          
          # Check if the script exists first
          if [ ! -f "scripts/extract-docs.sh" ]; then
            echo "ERROR: scripts/extract-docs.sh not found in monorepo"
            echo "Available files in scripts/:"
            ls -la scripts/ || echo "scripts/ directory not found"
            exit 1
          fi
          
          # Check if make is available
          if ! command -v make &> /dev/null; then
            echo "ERROR: 'make' command not found"
            exit 1
          fi
          
          # Run extraction with detailed output
          echo "Running extract-docs.sh..."
          # Set environment variables that might be needed
          export PATH="$PATH:$(npm bin -g)"
          export PYTHONPATH="${PYTHONPATH:-}:$PWD"
          
          if ! bash -x ./scripts/extract-docs.sh ../extracted-docs 2>&1; then
            echo "WARNING: Documentation extraction failed"
            echo "Checking monorepo structure:"
            ls -la
            echo "Checking if Makefile exists:"
            ls -la Makefile || echo "Makefile not found"
            echo "Checking available make targets:"
            grep -E "^[a-zA-Z0-9_-]+:" Makefile | head -20 || echo "Could not read Makefile"
            echo "Checking .docs-build directory if it exists:"
            ls -la .docs-build/ || echo ".docs-build directory not found"
            
            # Don't fail completely - we'll use fallback content
            echo "Will continue with partial or fallback content..."
          fi
          
          cd ..
          
          # Verify extraction succeeded
          if [ ! -d "extracted-docs" ]; then
            echo "ERROR: extracted-docs directory was not created"
            exit 1
          fi
          
          # Show what was extracted
          echo "Extracted documentation structure:"
          find extracted-docs -type f -name "*.json" -exec echo {} \; -exec head -5 {} \;
          echo "All extracted files:"
          find extracted-docs -type f | head -20
          
          # Check if content directory exists
          if [ ! -d "extracted-docs/content" ]; then
            echo "WARNING: extracted-docs/content not found"
            echo "Creating minimal content structure..."
            mkdir -p extracted-docs/content
            
            # Create a minimal README
            cat > extracted-docs/content/README.md << 'EOF'
---
title: Tafy Studio Documentation
sidebar_position: 1
---

# Tafy Studio Documentation

Welcome to the Tafy Studio documentation.

**Note**: The documentation extraction from the monorepo failed. This is placeholder content.

## Troubleshooting

If you're seeing this message, it means the documentation build process couldn't extract content from the main repository. Please check:

1. The monorepo has a `docs/` directory with markdown files
2. The `scripts/extract-docs.sh` script exists and is executable
3. The `make docs-prepare` target works correctly

For more information, check the GitHub Actions logs.
EOF
            
            # Create other required files
            for file in VISION.md ARCHITECTURE.md CONCEPTS.md QUICKSTART.md DEVELOPMENT_SETUP.md TROUBLESHOOTING.md TESTING.md SECURITY.md HAL_SPEC.md; do
              cat > "extracted-docs/content/$file" << EOF
---
title: ${file%.md}
---

# ${file%.md}

This documentation file is not yet available.
EOF
            done
          fi
      
      - name: Process extracted documentation
        run: |
          # Create docs directory
          mkdir -p docs
          
          # Check what's in extracted-docs
          echo "Contents of extracted-docs:"
          ls -la extracted-docs/
          
          # Copy static content to Docusaurus docs directory
          if [ -d "extracted-docs/content" ]; then
            echo "Copying content from extracted-docs/content/"
            cp -r extracted-docs/content/* docs/
          else
            echo "ERROR: extracted-docs/content directory not found"
            echo "Available directories in extracted-docs:"
            ls -la extracted-docs/
            exit 1
          fi
          
          # Copy API documentation to static directory
          mkdir -p static/api
          if [ -d "extracted-docs/api" ]; then
            cp -r extracted-docs/api/* static/api/
          fi
          
          # Process schemas if available
          if [ -d "extracted-docs/schemas" ]; then
            mkdir -p docs/reference
            cp -r extracted-docs/schemas/* docs/reference/
          fi
          
          # Process examples if available
          if [ -d "extracted-docs/examples" ]; then
            mkdir -p docs/examples
            cp -r extracted-docs/examples/* docs/examples/
          fi
          
          # Show what was copied
          echo "Contents of docs directory:"
          ls -la docs/
          
          # Verify critical files exist
          required_files="README.md VISION.md ARCHITECTURE.md CONCEPTS.md QUICKSTART.md"
          missing_files=""
          for file in $required_files; do
            if [ ! -f "docs/$file" ]; then
              missing_files="$missing_files $file"
            fi
          done
          
          if [ -n "$missing_files" ]; then
            echo "ERROR: Missing required documentation files:$missing_files"
            echo "This likely means the monorepo's docs/ directory is missing these files."
            exit 1
          fi
          
          # Generate sidebar based on index.json
          if [ -f "extracted-docs/index.json" ]; then
            node scripts/generate-sidebar.js extracted-docs/index.json > sidebars.ts
            echo "Generated sidebars.ts from extracted documentation"
          else
            echo "Warning: No index.json found, using existing sidebars.ts"
            # Verify sidebars.ts exists
            if [ ! -f "sidebars.ts" ]; then
              echo "ERROR: No sidebars.ts found and couldn't generate one"
              echo "Using fallback sidebar configuration"
              cp sidebars.ts.backup sidebars.ts || echo "No backup found either"
            fi
          fi
          
          # Create API documentation pages that reference the static API docs
          mkdir -p docs/api
          
          # Create API index
          cat > docs/api/index.md << 'EOF'
          ---
          title: API Reference
          description: Tafy Studio API documentation
          ---

          # API Reference

          Tafy Studio provides APIs in multiple languages for building robotics applications.

          ## Available APIs

          ### [TypeScript/JavaScript API](./typescript)
          The TypeScript SDK for building web interfaces and Node.js applications.

          ### [Python API](./python)
          The Python SDK for building backend services and robotics applications.

          ### [Go API](./go)
          The Go SDK for building high-performance node agents and services.

          ## Getting Started

          Each API provides:
          - Client libraries for NATS messaging
          - HAL (Hardware Abstraction Layer) message types
          - Helper utilities for common robotics tasks

          Choose the API that best fits your use case and development environment.
          EOF
          
          # Generate TypeScript API docs page
          cat > docs/api/typescript.md << 'EOF'
          ---
          title: TypeScript API
          ---

          # TypeScript API Reference

          The TypeScript SDK is available as `@tafystudio/sdk-ts`.

          ## Installation

          ```bash
          npm install @tafystudio/sdk-ts
          ```

          ## Usage

          ```typescript
          import { TafyClient } from '@tafystudio/sdk-ts';

          const client = new TafyClient({
            natsUrl: 'nats://localhost:4222'
          });

          await client.connect();
          ```

          ## API Documentation

          [View the full TypeScript API documentation](/api/typescript/index.html)
          EOF
          
          # Generate Python API docs page
          cat > docs/api/python.md << 'EOF'
          ---
          title: Python API
          ---

          # Python API Reference

          The Python SDK provides comprehensive support for building Tafy Studio applications.

          ## Installation

          ```bash
          pip install tafystudio
          ```

          ## Usage

          ```python
          from tafystudio import TafyClient

          client = TafyClient(nats_url="nats://localhost:4222")
          await client.connect()
          ```

          ## API Documentation

          [View the full Python API documentation](/api/python/index.html)
          EOF
          
          # Go API docs reference
          cat > docs/api/go.md << 'EOF'
          ---
          title: Go API
          ---

          # Go API Reference

          The Go SDK is available as a Go module.

          ## Installation

          ```bash
          go get github.com/tafystudio/tafystudio/packages/sdk-go
          ```

          ## Documentation

          Full API documentation is available at:
          <https://pkg.go.dev/github.com/tafystudio/tafystudio>

          ## Usage

          ```go
          import (
              "github.com/tafystudio/tafystudio/packages/sdk-go/client"
          )

          client, err := client.NewTafyClient("nats://localhost:4222")
          if err != nil {
              log.Fatal(err)
          }
          defer client.Close()
          ```
          EOF
      
      - name: Build documentation
        run: npm run build
        
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./build

  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4